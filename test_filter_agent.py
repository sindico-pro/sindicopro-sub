#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste para o FilterAgent
"""

import sys
import os

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from sub_crew.agents.filter_agent import FilterAgent

def test_filter_agent():
    """Testa o FilterAgent com diferentes tipos de mensagens"""
    
    filter_agent = FilterAgent()
    
    # Testes de mensagens DENTRO do escopo
    in_scope_tests = [
        "Como funciona o sistema S√≠ndico Pro?",
        "Preciso de ajuda com inadimpl√™ncia no condom√≠nio",
        "Como criar uma assembleia no sistema?",
        "Quais s√£o as despesas condominiais?",
        "Como funciona o rateio de despesas?",
        "Preciso de orienta√ß√£o sobre conven√ß√£o condominial",
        "Como configurar notifica√ß√µes no dashboard?",
        "Quais s√£o as funcionalidades do kanban?",
        "Como gerar relat√≥rios de ocorr√™ncias?",
        "Preciso de ajuda com manuten√ß√£o predial",
        
        # Arquitetura e Engenharia Condominial
        "Sub, eu preciso fazer uma reforma na fachada e estava conversando com o conselho, e ficamos na duvida, se para esse tipo de obra, precisamos de um coro qualificado.",
        "Preciso de orienta√ß√£o sobre projeto de impermeabiliza√ß√£o do condom√≠nio",
        "Como contratar um engenheiro para obra no condom√≠nio?",
        "Preciso de projeto arquitet√¥nico para reforma da √°rea de lazer",
        "Quais documentos preciso para obra de hidr√°ulica no condom√≠nio?",
        "Como funciona a licita√ß√£o para obra condominial?",
        "Preciso de projeto el√©trico para instala√ß√£o de c√¢meras",
        "Qual a melhor forma de impermeabilizar a laje do condom√≠nio?",
        "Como contratar arquiteto para projeto de paisagismo?",
        "Preciso de orienta√ß√£o sobre reforma estrutural no pr√©dio",
        
        # Advocacia Condominial
        "Preciso de orienta√ß√£o sobre processo de cobran√ßa judicial no condom√≠nio",
        "Como contratar um advogado para o condom√≠nio?",
        "Quais s√£o os procedimentos para execu√ß√£o condominial?",
        "Preciso de orienta√ß√£o sobre acordo judicial com inadimplente",
        "Como funciona a media√ß√£o em conflitos condominiais?",
        "Quais s√£o as responsabilidades civis do s√≠ndico?",
        "Preciso de orienta√ß√£o sobre arbitragem condominial",
        "Como proceder com notifica√ß√£o extrajudicial?",
        "Quais s√£o os prazos para a√ß√£o de cobran√ßa?",
        "Preciso de orienta√ß√£o sobre responsabilidade por acidentes no condom√≠nio",
        
        # Contabilidade Condominial
        "Como contratar um contador para o condom√≠nio?",
        "Preciso de orienta√ß√£o sobre presta√ß√£o de contas",
        "Como elaborar o balan√ßo patrimonial do condom√≠nio?",
        "Quais s√£o os crit√©rios para rateio de despesas?",
        "Como funciona o fundo de reserva condominial?",
        "Preciso de orienta√ß√£o sobre auditoria cont√°bil",
        "Como elaborar o or√ßamento anual do condom√≠nio?",
        "Quais s√£o as despesas extraordin√°rias?",
        "Como funciona a concilia√ß√£o banc√°ria?",
        "Preciso de orienta√ß√£o sobre lan√ßamentos cont√°beis"
    ]
    
    # Testes de mensagens FORA do escopo
    out_of_scope_tests = [
        "O que faz um urologista?",
        "Como fazer uma consulta m√©dica pessoal?",
        "Preciso de um advogado para div√≥rcio pessoal",
        "Quero contratar um contador para minha empresa pessoal",
        "Como funciona o Instagram?",
        "Qual o melhor restaurante da cidade?",
        "Preciso de ajuda com meu carro pessoal",
        "Como viajar para a Europa?",
        "Quero comprar roupas online",
        "Como funciona o Netflix?",
        "Preciso de um psic√≥logo para depress√£o",
        "Qual o melhor time de futebol?",
        "Como funciona a pol√≠tica brasileira?",
        "Preciso de ajuda com religi√£o pessoal"
    ]
    
    print("üß™ TESTANDO FILTER AGENT")
    print("=" * 50)
    
    print("\n‚úÖ TESTES - MENSAGENS DENTRO DO ESCOPO:")
    print("-" * 40)
    
    for i, message in enumerate(in_scope_tests, 1):
        is_in_scope, response, metadata = filter_agent.analyze_message(message)
        status = "‚úÖ DENTRO" if is_in_scope else "‚ùå FORA"
        print(f"{i:2d}. {status} | {message}")
        if not is_in_scope:
            print(f"    Score: {metadata.get('total_score', 0)} | Confidence: {metadata.get('confidence', 'unknown')}")
    
    print("\n‚ùå TESTES - MENSAGENS FORA DO ESCOPO:")
    print("-" * 40)
    
    for i, message in enumerate(out_of_scope_tests, 1):
        is_in_scope, response, metadata = filter_agent.analyze_message(message)
        status = "‚ùå FORA" if not is_in_scope else "‚úÖ DENTRO"
        print(f"{i:2d}. {status} | {message}")
        if is_in_scope:
            print(f"    Score: {metadata.get('total_score', 0)} | Confidence: {metadata.get('confidence', 'unknown')}")
    
    print("\nüìä RESUMO DOS TESTES:")
    print("-" * 40)
    
    # Contar resultados
    in_scope_correct = sum(1 for msg in in_scope_tests 
                          if filter_agent.analyze_message(msg)[0])
    out_scope_correct = sum(1 for msg in out_of_scope_tests 
                           if not filter_agent.analyze_message(msg)[0])
    
    total_tests = len(in_scope_tests) + len(out_of_scope_tests)
    accuracy = (in_scope_correct + out_scope_correct) / total_tests * 100
    
    print(f"‚úÖ Dentro do escopo: {in_scope_correct}/{len(in_scope_tests)} ({in_scope_correct/len(in_scope_tests)*100:.1f}%)")
    print(f"‚ùå Fora do escopo: {out_scope_correct}/{len(out_scope_tests)} ({out_scope_correct/len(out_scope_tests)*100:.1f}%)")
    print(f"üéØ Precis√£o geral: {accuracy:.1f}%")
    
    # Testar resposta de fora do escopo
    print("\nüí¨ EXEMPLO DE RESPOSTA PARA PERGUNTA FORA DO ESCOPO:")
    print("-" * 60)
    test_message = "O que faz um urologista?"
    is_in_scope, response, metadata = filter_agent.analyze_message(test_message)
    print(f"Pergunta: {test_message}")
    print(f"Resposta: {response}")

if __name__ == "__main__":
    test_filter_agent()
