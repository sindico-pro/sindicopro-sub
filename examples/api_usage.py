#!/usr/bin/env python
"""
Exemplo de uso da API do S√≠ndico PRO Chatbot.
"""
import requests
import json
import time

# Configura√ß√£o da API
API_BASE_URL = "http://localhost:8000"

def test_chat_api():
    """Testar a API de chat."""
    print("üß™ Testando API do S√≠ndico PRO Chatbot")
    print("=" * 50)
    
    # Testar health check
    print("1. Testando health check...")
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API est√° funcionando!")
            print(f"   Resposta: {response.json()}")
        else:
            print(f"‚ùå Erro no health check: {response.status_code}")
            return
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar √† API")
        print("   Certifique-se de que a API est√° rodando em http://localhost:8000")
        return
    
    print()
    
    # Testar chat
    print("2. Testando chat...")
    session_id = None
    
    # Primeira mensagem
    print("   Enviando primeira mensagem...")
    message1 = {
        "message": "Ol√°! Eu sou s√≠ndico de um condom√≠nio e preciso de ajuda."
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/chat", json=message1)
        if response.status_code == 200:
            data = response.json()
            session_id = data["session_id"]
            print("‚úÖ Primeira mensagem enviada com sucesso!")
            print(f"   Session ID: {session_id}")
            print(f"   Resposta: {data['response'][:100]}...")
        else:
            print(f"‚ùå Erro ao enviar primeira mensagem: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return
    
    print()
    
    # Segunda mensagem (com contexto)
    print("3. Testando contexto da conversa...")
    print("   Enviando segunda mensagem...")
    message2 = {
        "message": "Preciso contratar um contador para o condom√≠nio. O que devo fazer?",
        "session_id": session_id
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/chat", json=message2)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Segunda mensagem enviada com sucesso!")
            print(f"   Resposta: {data['response'][:100]}...")
        else:
            print(f"‚ùå Erro ao enviar segunda mensagem: {response.status_code}")
            print(f"   Resposta: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print()
    
    # Testar hist√≥rico
    print("4. Testando hist√≥rico da conversa...")
    try:
        response = requests.get(f"{API_BASE_URL}/sessions/{session_id}/history")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Hist√≥rico obtido com sucesso!")
            print(f"   Total de mensagens: {len(data['messages'])}")
            for i, msg in enumerate(data['messages'], 1):
                print(f"   Mensagem {i}: {msg['sender']} - {msg['content'][:50]}...")
        else:
            print(f"‚ùå Erro ao obter hist√≥rico: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print()
    
    # Testar listagem de sess√µes
    print("5. Testando listagem de sess√µes...")
    try:
        response = requests.get(f"{API_BASE_URL}/sessions")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Sess√µes listadas com sucesso!")
            print(f"   Total de sess√µes: {len(data)}")
            for session in data:
                print(f"   Sess√£o: {session['session_id'][:8]}... - {session['message_count']} mensagens")
        else:
            print(f"‚ùå Erro ao listar sess√µes: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print()
    print("üéâ Teste conclu√≠do!")

def test_chat_flow():
    """Testar um fluxo completo de conversa."""
    print("\n" + "=" * 50)
    print("üîÑ Testando fluxo completo de conversa")
    print("=" * 50)
    
    session_id = None
    
    # Lista de perguntas para testar
    questions = [
        "Ol√°! Sou s√≠ndico de um condom√≠nio residencial.",
        "Preciso saber sobre a contrata√ß√£o de funcion√°rios.",
        "Quais s√£o os documentos necess√°rios?",
        "E sobre o sal√°rio m√≠nimo?",
        "Obrigado pela ajuda!"
    ]
    
    for i, question in enumerate(questions, 1):
        print(f"\n{i}. Pergunta: {question}")
        
        message = {
            "message": question
        }
        
        if session_id:
            message["session_id"] = session_id
        
        try:
            response = requests.post(f"{API_BASE_URL}/chat", json=message)
            if response.status_code == 200:
                data = response.json()
                session_id = data["session_id"]
                print(f"   Resposta: {data['response'][:150]}...")
            else:
                print(f"   ‚ùå Erro: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        
        time.sleep(1)  # Pausa entre mensagens
    
    print(f"\n‚úÖ Fluxo conclu√≠do! Session ID: {session_id}")

if __name__ == "__main__":
    print("üöÄ Iniciando testes da API S√≠ndico PRO Chatbot")
    print("   Certifique-se de que a API est√° rodando em http://localhost:8000")
    print()
    
    # Instalar requests se n√£o estiver instalado
    try:
        import requests
    except ImportError:
        print("‚ùå Erro: Biblioteca 'requests' n√£o encontrada")
        print("   Instale com: pip install requests")
        exit(1)
    
    # Executar testes
    test_chat_api()
    test_chat_flow()
    
    print("\n" + "=" * 50)
    print("üìö Para mais informa√ß√µes, consulte:")
    print("   - Documenta√ß√£o da API: http://localhost:8000/docs")
    print("   - README.md do projeto")
    print("   - examples/nextjs-integration.md")
