#!/usr/bin/env python
"""
Teste espec√≠fico para AWS MemoryDB.
"""
import os
import sys
from pathlib import Path

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_aws_memorydb():
    """Testar conex√£o com AWS MemoryDB."""
    print("‚òÅÔ∏è  Testando AWS MemoryDB...")
    print("=" * 50)
    
    # Configurar URL do AWS MemoryDB
    aws_redis_url = "redis://clustercfg.sub-redis.lueflv.memorydb.us-east-1.amazonaws.com:6379"
    os.environ["REDIS_URL"] = aws_redis_url
    
    try:
        import redis
        client = redis.from_url(aws_redis_url, decode_responses=True)
        client.ping()
        print("‚úÖ Conectado ao AWS MemoryDB com sucesso!")
        
        # Teste b√°sico
        client.set("test_key", "test_value", ex=60)
        value = client.get("test_key")
        print(f"‚úÖ Teste de escrita/leitura: {value}")
        
        # Limpar teste
        client.delete("test_key")
        print("‚úÖ Teste conclu√≠do e limpo")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com AWS MemoryDB: {e}")
        print()
        print("üîß POSS√çVEIS SOLU√á√ïES:")
        print("   1. Verificar se o cluster est√° ativo na AWS")
        print("   2. Verificar permiss√µes de rede (Security Groups)")
        print("   3. Verificar se est√° na mesma VPC")
        print("   4. Verificar se o endpoint est√° correto")
        print()
        return False

def test_memory_system_aws():
    """Testar sistema de mem√≥ria com AWS MemoryDB."""
    print("\nüß† Testando sistema de mem√≥ria com AWS MemoryDB...")
    print("=" * 50)
    
    try:
        from sub_crew.memory_factory import memory
        from sub_crew.memory import ChatMessage
        from datetime import datetime
        
        # Teste b√°sico
        session_id = "aws_test_session"
        message = ChatMessage(
            content="Teste de mensagem no AWS MemoryDB",
            sender="user",
            timestamp=datetime.now()
        )
        
        # Adicionar mensagem
        memory.add_message(session_id, message)
        print("‚úÖ Mensagem adicionada ao AWS MemoryDB")
        
        # Recuperar conversa
        conversation = memory.get_conversation(session_id)
        print(f"‚úÖ Conversa recuperada: {len(conversation)} mensagens")
        
        # Estat√≠sticas
        stats = memory.get_stats()
        print(f"‚úÖ Estat√≠sticas: {stats}")
        
        # Health check
        if hasattr(memory, 'health_check'):
            health = memory.health_check()
            print(f"‚úÖ Health check: {health}")
        
        # Limpar
        memory.clear_conversation(session_id)
        print("‚úÖ Conversa limpa")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de mem√≥ria: {e}")
        return False

def show_aws_setup_instructions():
    """Mostrar instru√ß√µes de configura√ß√£o para AWS."""
    print("\n" + "=" * 60)
    print("‚òÅÔ∏è  CONFIGURA√á√ÉO PARA AWS MEMORYDB")
    print("=" * 60)
    print()
    print("1. üîß Configurar vari√°veis de ambiente:")
    print("   export GEMINI_API_KEY='sua_chave_aqui'")
    print("   export REDIS_URL='redis://clustercfg.sub-redis.lueflv.memorydb.us-east-1.amazonaws.com:6379'")
    print()
    print("2. üê≥ Usar Docker Compose para AWS:")
    print("   cp config.aws.env .env")
    print("   docker-compose -f docker-compose.aws.yml up")
    print()
    print("3. üöÄ Executar diretamente:")
    print("   python start_api.py")
    print()
    print("4. üß™ Testar:")
    print("   python test_aws_redis.py")
    print()
    print("üìã VERIFICA√á√ïES IMPORTANTES:")
    print("   ‚úÖ Cluster MemoryDB ativo na AWS")
    print("   ‚úÖ Security Groups permitem conex√£o na porta 6379")
    print("   ‚úÖ Inst√¢ncia na mesma VPC do cluster")
    print("   ‚úÖ Endpoint correto do cluster")

def main():
    """Fun√ß√£o principal."""
    print("‚òÅÔ∏è  TESTE DO AWS MEMORYDB")
    print("=" * 60)
    
    # Teste de conex√£o
    if not test_aws_memorydb():
        print("\n‚ùå AWS MemoryDB n√£o est√° acess√≠vel!")
        show_aws_setup_instructions()
        return
    
    # Teste do sistema
    if test_memory_system_aws():
        print("\nüéâ Todos os testes passaram!")
        print("   Seu sistema est√° pronto para usar AWS MemoryDB!")
    else:
        print("\n‚ùå Alguns testes falharam!")
        show_aws_setup_instructions()

if __name__ == "__main__":
    main()
