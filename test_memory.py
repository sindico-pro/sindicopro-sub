#!/usr/bin/env python
"""
Teste do sistema de mem√≥ria (arquivos vs Redis).
"""
import os
import sys
import time
from pathlib import Path

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_file_memory():
    """Testar mem√≥ria em arquivos."""
    print("üìÅ Testando mem√≥ria em arquivos...")
    print("=" * 50)
    
    # Configurar para usar arquivos
    os.environ["MEMORY_TYPE"] = "file"
    
    from sub_crew.memory_factory import create_memory
    from sub_crew.memory import ChatMessage
    from datetime import datetime
    
    memory = create_memory()
    
    # Teste b√°sico
    session_id = "test_file_session"
    message = ChatMessage(
        content="Teste de mensagem em arquivo",
        sender="user",
        timestamp=datetime.now()
    )
    
    # Adicionar mensagem
    memory.add_message(session_id, message)
    print("‚úÖ Mensagem adicionada")
    
    # Recuperar conversa
    conversation = memory.get_conversation(session_id)
    print(f"‚úÖ Conversa recuperada: {len(conversation)} mensagens")
    
    # Estat√≠sticas
    stats = memory.get_stats()
    print(f"‚úÖ Estat√≠sticas: {stats}")
    
    # Limpar
    memory.clear_conversation(session_id)
    print("‚úÖ Conversa limpa")
    
    return True

def test_redis_memory():
    """Testar mem√≥ria Redis."""
    print("\nüî¥ Testando mem√≥ria Redis...")
    print("=" * 50)
    
    # Configurar para usar Redis
    os.environ["MEMORY_TYPE"] = "redis"
    os.environ["REDIS_URL"] = "redis://localhost:6379"
    os.environ["MEMORY_FALLBACK"] = "true"
    
    try:
        from sub_crew.memory_factory import create_memory
        from sub_crew.memory import ChatMessage
        from datetime import datetime
        
        memory = create_memory()
        
        # Verificar se Redis est√° dispon√≠vel
        if hasattr(memory, 'health_check'):
            health = memory.health_check()
            if not health.get("redis_available", False):
                print("‚ö†Ô∏è  Redis n√£o dispon√≠vel, usando fallback")
                return test_file_memory()
        
        # Teste b√°sico
        session_id = "test_redis_session"
        message = ChatMessage(
            content="Teste de mensagem no Redis",
            sender="user",
            timestamp=datetime.now()
        )
        
        # Adicionar mensagem
        memory.add_message(session_id, message)
        print("‚úÖ Mensagem adicionada no Redis")
        
        # Recuperar conversa
        conversation = memory.get_conversation(session_id)
        print(f"‚úÖ Conversa recuperada: {len(conversation)} mensagens")
        
        # Estat√≠sticas
        stats = memory.get_stats()
        print(f"‚úÖ Estat√≠sticas: {stats}")
        
        # Health check
        if hasattr(memory, 'health_check'):
            health = memory.health_check()
            print(f"‚úÖ Health check: {health}")
        
        # Limpar
        memory.clear_conversation(session_id)
        print("‚úÖ Conversa limpa")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no Redis: {e}")
        print("üîÑ Tentando fallback para arquivos...")
        return test_file_memory()

def test_performance():
    """Teste de performance comparativo."""
    print("\n‚ö° Teste de performance...")
    print("=" * 50)
    
    from sub_crew.memory import ChatMessage
    from datetime import datetime
    import time
    
    # Teste com arquivos
    print("üìÅ Testando performance com arquivos...")
    os.environ["MEMORY_TYPE"] = "file"
    
    from sub_crew.memory_factory import create_memory
    file_memory = create_memory()
    
    start_time = time.time()
    for i in range(100):
        message = ChatMessage(
            content=f"Mensagem de teste {i}",
            sender="user",
            timestamp=datetime.now()
        )
        file_memory.add_message(f"perf_test_{i}", message)
    
    file_time = time.time() - start_time
    print(f"‚úÖ Arquivos: {file_time:.2f}s para 100 mensagens")
    
    # Teste com Redis (se dispon√≠vel)
    print("\nüî¥ Testando performance com Redis...")
    os.environ["MEMORY_TYPE"] = "redis"
    
    try:
        redis_memory = create_memory()
        
        if hasattr(redis_memory, 'health_check'):
            health = redis_memory.health_check()
            if not health.get("redis_available", False):
                print("‚ö†Ô∏è  Redis n√£o dispon√≠vel para teste de performance")
                return
        
        start_time = time.time()
        for i in range(100):
            message = ChatMessage(
                content=f"Mensagem de teste Redis {i}",
                sender="user",
                timestamp=datetime.now()
            )
            redis_memory.add_message(f"redis_perf_test_{i}", message)
        
        redis_time = time.time() - start_time
        print(f"‚úÖ Redis: {redis_time:.2f}s para 100 mensagens")
        
        # Compara√ß√£o
        if redis_time < file_time:
            speedup = file_time / redis_time
            print(f"üöÄ Redis √© {speedup:.1f}x mais r√°pido que arquivos")
        else:
            slowdown = redis_time / file_time
            print(f"üêå Redis √© {slowdown:.1f}x mais lento que arquivos")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de performance do Redis: {e}")

def show_recommendations():
    """Mostrar recomenda√ß√µes de uso."""
    print("\n" + "=" * 60)
    print("üìã RECOMENDA√á√ïES DE USO")
    print("=" * 60)
    print()
    print("üìÅ USAR ARQUIVOS quando:")
    print("   - Desenvolvimento e testes")
    print("   - Aplica√ß√µes pequenas/m√©dias (< 1000 usu√°rios)")
    print("   - Deploy simples (sem depend√™ncias externas)")
    print("   - Custo zero de infraestrutura")
    print()
    print("üî¥ USAR REDIS quando:")
    print("   - Produ√ß√£o com alta concorr√™ncia")
    print("   - M√∫ltiplas inst√¢ncias da API")
    print("   - Performance cr√≠tica (< 100ms)")
    print("   - Escalabilidade horizontal")
    print()
    print("‚öôÔ∏è  CONFIGURA√á√ÉO:")
    print("   # Para arquivos (padr√£o)")
    print("   export MEMORY_TYPE=file")
    print()
    print("   # Para Redis")
    print("   export MEMORY_TYPE=redis")
    print("   export REDIS_URL=redis://localhost:6379")
    print("   export MEMORY_FALLBACK=true  # Fallback para arquivos")
    print()
    print("üê≥ DOCKER:")
    print("   # Com Redis")
    print("   docker-compose -f docker-compose.redis.yml up")
    print()
    print("   # Sem Redis (apenas arquivos)")
    print("   docker-compose up")

def main():
    """Fun√ß√£o principal do teste."""
    print("üß™ TESTE DO SISTEMA DE MEM√ìRIA")
    print("=" * 60)
    print()
    
    try:
        # Teste com arquivos
        test_file_memory()
        
        # Teste com Redis
        test_redis_memory()
        
        # Teste de performance
        test_performance()
        
        # Recomenda√ß√µes
        show_recommendations()
        
        print("\nüéâ Testes conclu√≠dos!")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro geral: {e}")

if __name__ == "__main__":
    main()
